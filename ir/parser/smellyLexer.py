# Generated from ir/smelly.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,255,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,3,8,122,8,8,1,8,4,8,125,8,8,
        11,8,12,8,126,1,9,3,9,130,8,9,1,9,5,9,133,8,9,10,9,12,9,136,9,9,
        1,9,1,9,4,9,140,8,9,11,9,12,9,141,1,10,1,10,5,10,146,8,10,10,10,
        12,10,149,9,10,1,10,1,10,1,10,5,10,154,8,10,10,10,12,10,157,9,10,
        1,10,1,10,3,10,161,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,3,11,172,8,11,1,12,1,12,1,12,1,12,1,13,1,13,5,13,180,8,13,10,
        13,12,13,183,9,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,
        18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,
        28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,36,5,36,240,8,36,10,36,12,36,243,9,
        36,1,36,1,36,1,36,1,36,1,37,4,37,250,8,37,11,37,12,37,251,1,37,1,
        37,3,147,155,241,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,1,0,4,1,0,48,57,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,266,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,80,1,0,0,0,5,85,
        1,0,0,0,7,90,1,0,0,0,9,96,1,0,0,0,11,102,1,0,0,0,13,109,1,0,0,0,
        15,118,1,0,0,0,17,121,1,0,0,0,19,129,1,0,0,0,21,160,1,0,0,0,23,171,
        1,0,0,0,25,173,1,0,0,0,27,177,1,0,0,0,29,184,1,0,0,0,31,186,1,0,
        0,0,33,188,1,0,0,0,35,190,1,0,0,0,37,192,1,0,0,0,39,194,1,0,0,0,
        41,197,1,0,0,0,43,200,1,0,0,0,45,202,1,0,0,0,47,204,1,0,0,0,49,207,
        1,0,0,0,51,210,1,0,0,0,53,213,1,0,0,0,55,216,1,0,0,0,57,218,1,0,
        0,0,59,220,1,0,0,0,61,222,1,0,0,0,63,224,1,0,0,0,65,226,1,0,0,0,
        67,228,1,0,0,0,69,230,1,0,0,0,71,232,1,0,0,0,73,235,1,0,0,0,75,249,
        1,0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,2,1,0,0,0,80,81,5,101,
        0,0,81,82,5,108,0,0,82,83,5,115,0,0,83,84,5,101,0,0,84,4,1,0,0,0,
        85,86,5,102,0,0,86,87,5,117,0,0,87,88,5,110,0,0,88,89,5,99,0,0,89,
        6,1,0,0,0,90,91,5,119,0,0,91,92,5,104,0,0,92,93,5,105,0,0,93,94,
        5,108,0,0,94,95,5,101,0,0,95,8,1,0,0,0,96,97,5,98,0,0,97,98,5,114,
        0,0,98,99,5,101,0,0,99,100,5,97,0,0,100,101,5,107,0,0,101,10,1,0,
        0,0,102,103,5,114,0,0,103,104,5,101,0,0,104,105,5,116,0,0,105,106,
        5,117,0,0,106,107,5,114,0,0,107,108,5,110,0,0,108,12,1,0,0,0,109,
        110,5,99,0,0,110,111,5,111,0,0,111,112,5,110,0,0,112,113,5,116,0,
        0,113,114,5,105,0,0,114,115,5,110,0,0,115,116,5,117,0,0,116,117,
        5,101,0,0,117,14,1,0,0,0,118,119,5,39,0,0,119,16,1,0,0,0,120,122,
        5,45,0,0,121,120,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,125,
        7,0,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,
        1,0,0,0,127,18,1,0,0,0,128,130,5,45,0,0,129,128,1,0,0,0,129,130,
        1,0,0,0,130,134,1,0,0,0,131,133,7,0,0,0,132,131,1,0,0,0,133,136,
        1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,134,
        1,0,0,0,137,139,5,46,0,0,138,140,7,0,0,0,139,138,1,0,0,0,140,141,
        1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,20,1,0,0,0,143,147,5,
        34,0,0,144,146,9,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,148,1,
        0,0,0,147,145,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,161,5,
        34,0,0,151,155,3,15,7,0,152,154,9,0,0,0,153,152,1,0,0,0,154,157,
        1,0,0,0,155,156,1,0,0,0,155,153,1,0,0,0,156,158,1,0,0,0,157,155,
        1,0,0,0,158,159,3,15,7,0,159,161,1,0,0,0,160,143,1,0,0,0,160,151,
        1,0,0,0,161,22,1,0,0,0,162,163,5,116,0,0,163,164,5,114,0,0,164,165,
        5,117,0,0,165,172,5,101,0,0,166,167,5,102,0,0,167,168,5,97,0,0,168,
        169,5,108,0,0,169,170,5,115,0,0,170,172,5,101,0,0,171,162,1,0,0,
        0,171,166,1,0,0,0,172,24,1,0,0,0,173,174,5,110,0,0,174,175,5,105,
        0,0,175,176,5,108,0,0,176,26,1,0,0,0,177,181,7,1,0,0,178,180,7,2,
        0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
        0,0,182,28,1,0,0,0,183,181,1,0,0,0,184,185,5,43,0,0,185,30,1,0,0,
        0,186,187,5,45,0,0,187,32,1,0,0,0,188,189,5,42,0,0,189,34,1,0,0,
        0,190,191,5,47,0,0,191,36,1,0,0,0,192,193,5,37,0,0,193,38,1,0,0,
        0,194,195,5,61,0,0,195,196,5,61,0,0,196,40,1,0,0,0,197,198,5,33,
        0,0,198,199,5,61,0,0,199,42,1,0,0,0,200,201,5,62,0,0,201,44,1,0,
        0,0,202,203,5,60,0,0,203,46,1,0,0,0,204,205,5,62,0,0,205,206,5,61,
        0,0,206,48,1,0,0,0,207,208,5,60,0,0,208,209,5,61,0,0,209,50,1,0,
        0,0,210,211,5,38,0,0,211,212,5,38,0,0,212,52,1,0,0,0,213,214,5,124,
        0,0,214,215,5,124,0,0,215,54,1,0,0,0,216,217,5,33,0,0,217,56,1,0,
        0,0,218,219,5,46,0,0,219,58,1,0,0,0,220,221,5,44,0,0,221,60,1,0,
        0,0,222,223,5,61,0,0,223,62,1,0,0,0,224,225,5,40,0,0,225,64,1,0,
        0,0,226,227,5,41,0,0,227,66,1,0,0,0,228,229,5,123,0,0,229,68,1,0,
        0,0,230,231,5,125,0,0,231,70,1,0,0,0,232,233,5,45,0,0,233,234,5,
        62,0,0,234,72,1,0,0,0,235,236,5,47,0,0,236,237,5,47,0,0,237,241,
        1,0,0,0,238,240,9,0,0,0,239,238,1,0,0,0,240,243,1,0,0,0,241,242,
        1,0,0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,241,1,0,0,0,244,245,
        5,10,0,0,245,246,1,0,0,0,246,247,6,36,0,0,247,74,1,0,0,0,248,250,
        7,3,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,
        1,0,0,0,252,253,1,0,0,0,253,254,6,37,0,0,254,76,1,0,0,0,13,0,121,
        126,129,134,141,147,155,160,171,181,241,251,1,6,0,0
    ]

class smellyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    FUNC = 3
    WHILE = 4
    BREAK = 5
    RETURN = 6
    CONTINUE = 7
    APOSTROPHE = 8
    INT = 9
    FLOAT = 10
    STRING = 11
    BOOL = 12
    NIL = 13
    ID = 14
    ADD = 15
    SUB = 16
    MUL = 17
    DIV = 18
    MOD = 19
    EEQ = 20
    NEQ = 21
    GT = 22
    LT = 23
    GTE = 24
    LTE = 25
    AND = 26
    OR = 27
    NOT = 28
    DOT = 29
    COMMA = 30
    ASSIGN = 31
    LPAREN = 32
    RPAREN = 33
    LBRACE = 34
    RBRACE = 35
    RETURNS = 36
    COMMENT = 37
    WHITESPACE = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'func'", "'while'", "'break'", "'return'", 
            "'continue'", "'''", "'nil'", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'", 
            "'!'", "'.'", "','", "'='", "'('", "')'", "'{'", "'}'", "'->'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "FUNC", "WHILE", "BREAK", "RETURN", "CONTINUE", 
            "APOSTROPHE", "INT", "FLOAT", "STRING", "BOOL", "NIL", "ID", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "EEQ", "NEQ", "GT", "LT", 
            "GTE", "LTE", "AND", "OR", "NOT", "DOT", "COMMA", "ASSIGN", 
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RETURNS", "COMMENT", 
            "WHITESPACE" ]

    ruleNames = [ "IF", "ELSE", "FUNC", "WHILE", "BREAK", "RETURN", "CONTINUE", 
                  "APOSTROPHE", "INT", "FLOAT", "STRING", "BOOL", "NIL", 
                  "ID", "ADD", "SUB", "MUL", "DIV", "MOD", "EEQ", "NEQ", 
                  "GT", "LT", "GTE", "LTE", "AND", "OR", "NOT", "DOT", "COMMA", 
                  "ASSIGN", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "RETURNS", 
                  "COMMENT", "WHITESPACE" ]

    grammarFileName = "smelly.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


